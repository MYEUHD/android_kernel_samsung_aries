#!/stage1/busybox sh

create_ubi_partitions() {
	# format as UBI
	ubiformat /dev/mtd/mtd1 -y

	# attach ubi
	ubiattach -m 1

	# create ubi volumes
	ubimkvol /dev/ubi0 -N ramdisk -s 10MiB -n 1
	ubimkvol /dev/ubi0 -N ramdisk-recovery -s 10MiB -n 2
	ubimkvol /dev/ubi0 -N system -m -n 0

	# create ubiblocks for system, ramdisk, recovery
	ubiblock -c /dev/ubi0_0
	ubiblock -c /dev/ubi0_1
	ubiblock -c /dev/ubi0_2
}

create_lvm_partitions() {
	while ! busybox test -d /sys/dev/block/179:0 ; do
		busybox echo "waiting for internal mmc" >>boot.txt
		busybox sleep 1
	done

	/lvm/sbin/lvm vgscan --mknodes --ignorelockingfailure
	/lvm/sbin/lvm vgchange -aly --ignorelockingfailure

	# remove any lvm reference
	/lvm/sbin/lvm lvremove -f lvpool
	/lvm/sbin/lvm vgremove -f lvpool
	/lvm/sbin/lvm pvremove -ffy /dev/block/mmcblk0p2

	# force clean up
	busybox dd if=/dev/zero of=/dev/block/mmcblk0p2 bs=512 count=1

	# create lvm phisical volumes and lvpool group
	/lvm/sbin/lvm pvcreate /dev/block/mmcblk0p2
	/lvm/sbin/lvm vgcreate lvpool /dev/block/mmcblk0p2

	# create lvm partitions - 100MB cache, rest for /data
	/lvm/sbin/lvm lvcreate -L 104857600B -n cache lvpool
	/lvm/sbin/lvm lvcreate -l 100%FREE -n userdata lvpool

	# format partitions
	make_ext4fs -b 4096 -g 32768 -i 7680 -I 256 -a /cache /dev/lvpool/cache
	make_ext4fs -b 4096 -g 32768 -i 8192 -I 256 -a /data /dev/lvpool/userdata
}

export _PATH="$PATH"
export PATH=/stage1

cd /
busybox date >>/boot.txt
busybox rm init
busybox mount -t proc proc /proc
busybox mount -t sysfs sysfs /sys
busybox mount /dev/block/mmcblk0p1 /sdcard

exec >> /boot.txt
exec 2>&1

if busybox test -e /sdcard/ramdisk.cpio ; then
	# upgrade from bml
	busybox echo 'UPGRADE BOOT' >>/boot.txt

	create_ubi_partitions

	# copy efs to its own partition
	busybox mount -t yaffs2 /dev/block/mtdblock2 /efs

	# verify the md5sum of efs.tar before restore
	cd /sdcard/backup/
	busybox md5sum -c efs.tar.md5

	# save the exit status of md5sum
	MD5RESULT=$?
	if ! busybox test $MD5RESULT; then
		busybox echo "efs.tar could not be verified." >>/boot.txt
	else
		# extract the tar file in the /efs partition
		cd /efs
		busybox tar xf /sdcard/backup/efs.tar
		busybox echo "efs restored"
	fi
	cd /
	busybox sync
	busybox umount /efs

	# untar ramdisk.cpio, create squashfs and write to recovery ubiblock
	cd /temp
	busybox cpio -ui < /sdcard/ramdisk.cpio
	cd /
	mksquashfs /temp /sdcard/recovery.squash -comp gzip -noappend
	ubiupdatevol /dev/ubi0_2 /sdcard/recovery.squash

	create_lvm_partitions

	# Remove ramdisk.cpio to prevent this from looping
	busybox rm /sdcard/ramdisk.cpio

	# disable lpm
	busybox echo 0 > /sys/class/power_supply/battery/charging_mode_booting
else
	# try attaching ubi
	ubiattach -m 1

	# regular recovery boot
	busybox echo "REGULAR BOOT" >>boot.txt

	# create ubiblocks for system, ramdisk, ramdisk-recovery, vendor
	ubiblock -c /dev/ubi0_0
	ubiblock -c /dev/ubi0_1
	ubiblock -c /dev/ubi0_2
fi

busybox mount /dev/block/ubiblock0_2 /recovery -t squashfs -o ro
busybox cp -Rfp /recovery/* /
busybox umount /recovery
busybox cp /boot.txt /sdcard
busybox umount /sdcard

busybox umount /sys
busybox umount /proc
busybox date >>boot.txt
busybox rm -rf /stage1 /sdcard /file_contexts /efs /temp /recovery
busybox find /dev/* ! -name '*ubi*' -delete
export PATH="${_PATH}"
exec /init
