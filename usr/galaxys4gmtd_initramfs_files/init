#!/stage1/busybox sh
export _PATH="$PATH"
export PATH=/stage1

cd /
busybox date >>/boot.txt
busybox rm init
busybox mount -t proc proc /proc
busybox mount -t sysfs sysfs /sys
busybox mount /dev/block/mmcblk0p1 /sdcard

exec >> /boot.txt
exec 2>&1

if busybox test -e /sdcard/backup/efs.tar ; then
	# boot from convert_ubi
	busybox echo 'REPARTITION BOOT' >>/boot.txt

	# format as UBI
	ubiformat /dev/mtd/mtd1 -y

	# attach ubi
	ubiattach -m 1

	# create ubi volumes
	ubimkvol /dev/ubi0 -N ramdisk -s 10MiB -n 1
	ubimkvol /dev/ubi0 -N ramdisk-recovery -s 10MiB -n 2
	ubimkvol /dev/ubi0 -N radio -s 20MiB -n 3
	ubimkvol /dev/ubi0 -N efs -s 10MiB -n 4
	ubimkvol /dev/ubi0 -N system -m -n 0

	# create ubiblocks for system, ramdisk, ramdisk-recovery, radio
	ubiblock -c /dev/ubi0_0
	ubiblock -c /dev/ubi0_1
	ubiblock -c /dev/ubi0_2
	ubiblock -c /dev/ubi0_3

	# copy efs to its own partition
	busybox mount -t ubifs /dev/ubi0_4 /efs

	# verify the md5sum of efs.tar before restore
	cd /sdcard/backup/
	busybox md5sum -c efs.tar.md5

	# save the exit status of md5sum
	MD5RESULT=$?
	if ! busybox test $MD5RESULT; then
		busybox echo "efs.tar could not be verified." >>/boot.txt
	else
		# extract the tar file in the /efs partition
		cd /efs
		busybox tar xf /sdcard/backup/efs.tar
		busybox echo "efs restored"
	fi
	cd /
	busybox sync
	busybox umount /efs

	# untar ramdisk.cpio, create squashfs and write to recovery ubiblock
	cd /temp
	busybox cpio -ui < /sdcard/ramdisk.cpio
	cd /
	mksquashfs /temp /sdcard/recovery.squash -comp gzip
	ubiupdatevol /dev/ubi0_2 /sdcard/recovery.squash

	busybox umount /sdcard
	# purge all partitions and create one new primary one
	# benign errors if only one partition is present
	# commands in order are:
		# delete both partitions
		# create new partition
		# make it primary
		# make it partition number 1
		# start at default address
		# size 100M
		# create new partition
		# make it primary
		# make it partition number 2
		# start at default address
		# max size
		# write to disk
	busybox fdisk /dev/block/mmcblk0 <<EOF
o
n
p
1

+100M
n
p
2


w
EOF

	make_ext4fs -l -16384 -a /data /dev/block/mmcblk0p2
	make_ext4fs -a /cache /dev/block/mmcblk0p1

	busybox mount /dev/block/mmcblk0p1 /sdcard

	# disable lpm
	busybox echo 0 > /sys/class/power_supply/battery/charging_mode_booting
else
	# android boot
	busybox echo "REGULAR BOOT" >>boot.txt

	# attach ubi
	ubiattach -m 1

	# create ubiblocks for system, ramdisk, ramdisk-recovery, radio
	ubiblock -c /dev/ubi0_0
	ubiblock -c /dev/ubi0_1
	ubiblock -c /dev/ubi0_2
	ubiblock -c /dev/ubi0_3

	busybox ls -l /dev/* /dev/block/* /
fi

busybox mount /dev/block/ubiblock0_2 /recovery -t squashfs -o ro
busybox cp -Rfp /recovery/* /
busybox umount /recovery
busybox cp /boot.txt /sdcard
busybox umount /sdcard

busybox umount /sys
busybox umount /proc
busybox date >>boot.txt
busybox rm -rf /stage1 /sdcard /file_contexts /efs /temp /recovery
busybox find /dev/* ! -name '*ubi*' -delete
export PATH="${_PATH}"
exec /init
